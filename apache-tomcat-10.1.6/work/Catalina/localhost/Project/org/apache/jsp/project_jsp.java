/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.6
 * Generated at: 2023-04-23 16:56:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.example.StopStem;
import com.example.SearchEngine;
import com.example.PageMeta;
import com.example.URLIndex;
import com.example.WordIndex;
import IRUtilities.Porter;
import java.util.Map;
import java.util.HashMap;

public final class project_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.example.StopStem");
    _jspx_imports_classes.add("com.example.URLIndex");
    _jspx_imports_classes.add("com.example.WordIndex");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.example.PageMeta");
    _jspx_imports_classes.add("com.example.SearchEngine");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("IRUtilities.Porter");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("	<head> \n");
      out.write("		<title> Search result </title>\n");
      out.write("		<style>\n");
      out.write("	\n");
      out.write("			.input-element {\n");
      out.write("				font: 12pt sans-serif;\n");
      out.write("				width: 80%;\n");
      out.write("				align-self: auto;\n");
      out.write("	\n");
      out.write("			}\n");
      out.write("	\n");
      out.write("			.submit-element {\n");
      out.write("				font: 12pt sans-serif;\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			body {\n");
      out.write("			border: 40px solid white;\n");
      out.write("			}\n");
      out.write("	  \n");
      out.write("		</style> \n");
      out.write("	</head> \n");
      out.write("<body>\n");
      out.write("Boscogle:\n");
      out.write("<form method=\"post\" action=\"project.jsp\"> \n");
      out.write("<input type=\"text\" name=\"txtquery\" class=\"input-element\"> \n");
      out.write("<input type=\"checkbox\" name=\"save\" value=\"save\" checked>Save\n");
      out.write("<!-- <input type=\"checkbox\" name=\"clear\" value=\"clear\">clear histroy -->\n");
      out.write("<input type=\"submit\" value=\"Search\" class=\"submit-element\"> \n");
      out.write("</form> \n");


if(request.getParameter("txtquery")!=""){	
	out.println("Query is:");
	out.println("<br>");
	String query = request.getParameter("txtquery");
	out.println(query);
	out.println("<hr>");
	

	/*
	SearchEngine se = new SearchEngine(query);
	Map<UUID, Double> resultlist = se.search();

	if(resultlist == null){
		out.println("No match of the phase Or your all your query words are not indexed.");
	}
	else{
		URLIndex urlIndex = new URLIndex("URL");
		WordIndex wordIndex = new WordIndex("WordDB");

		out.println("The results are:");
		out.println("<br>");
		int numPage = 1;
		for (Map.Entry<UUID, Double> entry : resultlist.entrySet()) {
			if (numPage > 51) {
				break;
			}

			UUID pageID = entry.getKey();
			Double score = entry.getValue();
			out.println("Ranking: " + numPage + " Score: " + score);
			out.println("<br>");
			out.println(urlIndex.getPageTitle(pageID));
			out.println("<br>");
			out.println(urlIndex.getPageURL(pageID));
			out.println("<br>");
			out.println(((PageMeta)urlIndex.getPageMeta(pageID)).getLastModified() + ", " + ((PageMeta)urlIndex.getPageMeta(pageID)).getPageSize());
			out.println("<br>");

			Map<UUID, Integer> wordList = wordIndex.getHighestFrequencyWords(pageID, 5);

            Map<String, Integer> wordList2 = new HashMap<String,Integer>();
            for (UUID wordID : wordList.keySet()){
                wordList2.put(wordIndex.getWord(wordID), wordList.get(wordID));
            }
			out.println("Top 5 frequency words: " + wordList2);
			out.println("<br>");

			Vector<UUID>parentsList = urlIndex.getChildToParents(pageID);
			int i = 1;
			for (UUID parent : parentsList){
                if (i >= 6) break;
                out.println("Parent link" + i + ": " + urlIndex.getPageURL(parent));
				out.println("<br>");
                i++;
            }

            Vector<UUID>childenList = urlIndex.getParentToChilden(pageID);
            i = 1;
            for (UUID child : childenList){
                if (i >= 6) break;
                out.println("Child link" + i + ": " + urlIndex.getPageURL(child));
				out.println("<br>");
                i++;
            }
			out.println("<hr>");
			numpage += 1;
		}
	} */

}
else{
	out.println("You input nothing");
	out.println("<hr>");
	Cookie ck[] = request.getCookies();
	int count = 0;
	if(ck != null){
		out.println("Search Histroy:");
		out.println("<br>");
		for(int i = ck.length-1;i >= 0; i--){
			if(ck[i].getName().equals("query"+String.valueOf(i))){
				out.println(ck[i].getValue());
				out.println("<br>");
			}
			count ++;
		}
	}
	out.println("<hr>");
}


      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
